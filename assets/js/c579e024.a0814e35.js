"use strict";(self.webpackChunkericdudley=self.webpackChunkericdudley||[]).push([[709],{1434:(e,t,i)=>{i.d(t,{Zo:()=>u,kt:()=>c});var n=i(6687);function r(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function o(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,n)}return i}function a(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?o(Object(i),!0).forEach((function(t){r(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):o(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function s(e,t){if(null==e)return{};var i,n,r=function(e,t){if(null==e)return{};var i,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)i=o[n],t.indexOf(i)>=0||(r[i]=e[i]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)i=o[n],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(r[i]=e[i])}return r}var l=n.createContext({}),h=function(e){var t=n.useContext(l),i=t;return e&&(i="function"==typeof e?e(t):a(a({},t),e)),i},u=function(e){var t=h(e.components);return n.createElement(l.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var i=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=h(i),d=r,c=p["".concat(l,".").concat(d)]||p[d]||m[d]||o;return i?n.createElement(c,a(a({ref:t},u),{},{components:i})):n.createElement(c,a({ref:t},u))}));function c(e,t){var i=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=i.length,a=new Array(o);a[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:r,a[1]=s;for(var h=2;h<o;h++)a[h]=i[h];return n.createElement.apply(null,a)}return n.createElement.apply(null,i)}d.displayName="MDXCreateElement"},2483:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>h});var n=i(557),r=(i(6687),i(1434));const o={slug:"100-prisoners-problem",title:"Visualizing The 100 Prisoners Problem",authors:"me",tags:["simulation","software development","mathematics","puzzles"]},a="The 100 Prisoners Problem: A Challenge in Probability and Strategy",s={permalink:"/blog/100-prisoners-problem",source:"@site/blog/2023-05-08-100-prisoners.md",title:"Visualizing The 100 Prisoners Problem",description:"Who doesn't love a good puzzle? They challenge us, intrigue us, and sometimes even frustrate us. But most importantly, they provide a unique opportunity to test our problem-solving skills and stretch our minds. Today, we're going to delve into an intriguing logic problem known as the 100 Prisoners Problem.",date:"2023-05-08T00:00:00.000Z",formattedDate:"May 8, 2023",tags:[{label:"simulation",permalink:"/blog/tags/simulation"},{label:"software development",permalink:"/blog/tags/software-development"},{label:"mathematics",permalink:"/blog/tags/mathematics"},{label:"puzzles",permalink:"/blog/tags/puzzles"}],readingTime:8.015,hasTruncateMarker:!0,authors:[{name:"Eric Dudley",title:"Software Engineer",url:"https://www.linkedin.com/in/eric-dudley-894721106",imageURL:"https://github.com/ericdudley.png",key:"me"}],frontMatter:{slug:"100-prisoners-problem",title:"Visualizing The 100 Prisoners Problem",authors:"me",tags:["simulation","software development","mathematics","puzzles"]},nextItem:{title:"Code Review Mindset",permalink:"/blog/code-review-mindset"}},l={authorsImageUrls:[void 0]},h=[{value:"Unraveling the 100 Prisoners Problem",id:"unraveling-the-100-prisoners-problem",level:2},{value:"Simulation",id:"simulation",level:2},{value:"Give it a try here:",id:"give-it-a-try-here",level:3},{value:"The Strategies",id:"the-strategies",level:2},{value:"The Random Strategy",id:"the-random-strategy",level:3},{value:"The Optimal Strategy",id:"the-optimal-strategy",level:3},{value:"A JavaScript Detour: <code>Promise.resolve()</code> vs <code>setTimeout(() =&gt; {}, 0)</code>",id:"a-javascript-detour-promiseresolve-vs-settimeout---0",level:2},{value:"Conclusion",id:"conclusion",level:2}],u={toc:h},p="wrapper";function m(e){let{components:t,...i}=e;return(0,r.kt)(p,(0,n.Z)({},u,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Who doesn't love a good puzzle? They challenge us, intrigue us, and sometimes even frustrate us. But most importantly, they provide a unique opportunity to test our problem-solving skills and stretch our minds. Today, we're going to delve into an intriguing logic problem known as the ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/100_prisoners_problem"},"100 Prisoners Problem"),"."),(0,r.kt)("p",null,"Eventually we'll come to a surprising result that seems to go against the odds, but first let's set the stage by presenting the problem."),(0,r.kt)("h2",{id:"unraveling-the-100-prisoners-problem"},"Unraveling the 100 Prisoners Problem"),(0,r.kt)("p",null,"Imagine 100 prisoners, each assigned a unique number from 1 to 100. Their freedom is at stake in a peculiar game, the rules of which are quite simple but the strategy anything but."),(0,r.kt)("p",null,"In the warden's room, there are 100 drawers and 100 pieces of paper with the numbers from 1 to 100 written on them in a random order. The warden places these pieces of paper in the drawers, one per drawer, and closes the drawers."),(0,r.kt)("p",null,"The prisoners are allowed to strategize before the game starts; once they are ready, the game begins. Each prisoner, one at a time, is led into the room and allowed to open 50 drawers of their choosing. If they locate their own number, they quietly exit the warden's room into a holding cell, and the drawers are returned to their undisturbed state before the next prisoner enters."),(0,r.kt)("p",null,"If all prisoners find their number, they are all set free. If even one fails, they all are returned to their cells."),(0,r.kt)("p",null,"Now that you've been introduced to the problem, have a moment to ponder. What strategy would you employ if you were one of these prisoners?"),(0,r.kt)("h2",{id:"simulation"},"Simulation"),(0,r.kt)("p",null,"A visual representation can help solidify one's understanding of a problem, so I created the following simulation. Try it out and see if you can figure out the optimal strategy, and then continue reading to see if you were right."),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Make sure to increase the simulation tick to slow down the simulation to see what the optimal strategy is doing. The 'Group by cycle' and 'Color by cycle' checkboxes will also help you visualize what the strategy is.")),(0,r.kt)("h3",{id:"give-it-a-try-here"},"Give it a try here:"),(0,r.kt)("iframe",{src:"https://ericdudley.github.io/100prisoners/",style:{width:"100%",height:"600px",border:"none"}}),(0,r.kt)("h2",{id:"the-strategies"},"The Strategies"),(0,r.kt)("p",null,"Now, let's dive deeper into the strategies our prisoners can use."),(0,r.kt)("h3",{id:"the-random-strategy"},"The Random Strategy"),(0,r.kt)("p",null,"Perhaps the most intuitive approach for the prisoners would be to adopt a random strategy. Each prisoner could simply open 50 drawers at random, hoping to find their number among them. At first glance, this approach seems reasonable. After all, with 50 attempts, each prisoner has a 50% chance of finding their number, right?"),(0,r.kt)("p",null,"Unfortunately, the reality is not quite so rosy. While the probability that a single prisoner finds their number using the random strategy is indeed 50%, the situation changes dramatically when we consider all the prisoners together."),(0,r.kt)("p",null,"Remember, the prisoners will only be freed if ",(0,r.kt)("em",{parentName:"p"},"all")," of them find their numbers. So what we're really interested in is not the probability of one prisoner finding their number, but the probability of all 100 prisoners doing so. To calculate this, we need to multiply the individual probabilities together."),(0,r.kt)("p",null,"Mathematically, this looks like:"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"(1/2) * (1/2) * ... * (1/2) = (1/2)^100")),(0,r.kt)("p",null,"When you calculate this out, the result is approximately 0.0000000000000000000000000000008, a number so close to zero that it's practically negligible. In layman's terms, the odds of all the prisoners finding their numbers using the random strategy are, for all intents and purposes, zero."),(0,r.kt)("p",null,"This situation is akin to asking the prisoners to flip 100 coins and freeing them only if all the coins land on heads. While it's certainly possible for a single coin to land on heads, the likelihood of all 100 coins doing so is astronomically small. It's a vivid demonstration of the fact that probabilities can be deceptive when compounded on a large scale."),(0,r.kt)("p",null,"Thus, while the random strategy may seem appealing due to its simplicity, it's a gamble that the prisoners are unlikely to win. So what strategy should they use instead?"),(0,r.kt)("h3",{id:"the-optimal-strategy"},"The Optimal Strategy"),(0,r.kt)("p",null,"In the face of such bleak odds, you may think that the prisoners are doomed to failure. However, a remarkable strategy exists that provides the prisoners with a survival probability of over 30%. This strategy hinges on the crucial observation that the prisoners don't have to decide beforehand which drawers to open. Instead, they can use the information they gain from the contents of each opened drawer to inform their next choice. This dynamism is the key to the optimal strategy."),(0,r.kt)("p",null,"Here's how it works:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Each prisoner begins by opening the drawer labeled with their ownf number."),(0,r.kt)("li",{parentName:"ol"},"If the drawer contains their own number, they've succeeded and can exit the warden's room."),(0,r.kt)("li",{parentName:"ol"},"If the drawer contains the number of another prisoner, they then open the drawer labeled with this newly found number."),(0,r.kt)("li",{parentName:"ol"},"The prisoner repeats steps 2 and 3 until they either find their own number or fail because their number is not found in the first fifty opened drawers.")),(0,r.kt)("p",null,"This strategy might seem like it's overly dependent on chance, but there's a method to the madness. The crucial point is that by starting with their own number, each prisoner guarantees they are on the unique permutation cycle of drawers containing their number. The question then becomes whether this cycle is longer than fifty drawers."),(0,r.kt)("p",null,'The concept of a "permutation cycle" might sound complex, but it\'s a straightforward concept. In our context, a permutation cycle refers to the sequence of numbers that a prisoner encounters when they follow the strategy outlined above. For instance, if prisoner 1 opens a drawer containing the number 20, then opens the drawer labeled 20 to find the number 35, and so on, the permutation cycle is the sequence of numbers (1, 20, 35, ...). The length of this cycle is the number of steps it takes for the sequence to return to the starting number\u2014in this case, 1. Since the prisoner starts with the drawer labelled with their own number, the length of the cycle is the number of drawers they must open before they find their own number. If there is a cycle of length greater than fifty, the prisoners will fail; otherwise, they will succeed.'),(0,r.kt)("p",null,'The beauty of this strategy lies in its blend of determinism and adaptability. Each prisoner starts with a deterministic choice, the drawer labeled with their own number, but then adapts their subsequent choices based on the numbers they encounter. It transforms the probability of success into a simple question, "What is the probability that there is a permutation cycle of length greater than fifty?" Turns out, this probability is about 70%, meaning the prisoners have a about a 30% chance of success.'),(0,r.kt)("admonition",{title:"Fun fact",type:"info"},(0,r.kt)("p",{parentName:"admonition"},"if you know the prisoners are following this strategy, given any drawer configuration, you could determine whether the prisoners will succeed or fail before the game even begins.")),(0,r.kt)("h2",{id:"a-javascript-detour-promiseresolve-vs-settimeout---0"},"A JavaScript Detour: ",(0,r.kt)("inlineCode",{parentName:"h2"},"Promise.resolve()")," vs ",(0,r.kt)("inlineCode",{parentName:"h2"},"setTimeout(() => {}, 0)")),(0,r.kt)("p",null,"When developing an interactive simulation like this, it's crucial to ensure the simulation doesn't block the browser's main thread. If we're not careful, an intensive computation could freeze up the browser and render it unresponsive. To prevent this, we can use JavaScript's built-in asynchronous mechanisms to break up the simulation into manageable chunks."),(0,r.kt)("p",null,"Originally, I used ",(0,r.kt)("inlineCode",{parentName:"p"},"setTimeout(runSimulationTick, simulationTickMs)")," to achieve this. ",(0,r.kt)("inlineCode",{parentName:"p"},"setTimeout")," not only allows us to divide the computation into smaller pieces, but it also gives us control over the simulation speed by adjusting the ",(0,r.kt)("inlineCode",{parentName:"p"},"simulationTickMs")," value. This means we can slow down or speed up the simulation as desired."),(0,r.kt)("p",null,"Now, you might think that setting ",(0,r.kt)("inlineCode",{parentName:"p"},"simulationTickMs")," to 0 would make the simulation run as fast as possible. While it certainly speeds things up, there's an even faster method: ",(0,r.kt)("inlineCode",{parentName:"p"},"Promise.resolve(1).then(runSimulationTick)"),". However, there's a catch: this approach doesn't allow for speed control and, if overused, can block the main thread, leading to a browser crash."),(0,r.kt)("p",null,"To strike the right balance, I fine-tuned the simulation loop:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"If ",(0,r.kt)("inlineCode",{parentName:"li"},"simulationTickMs")," is greater than 0, we use ",(0,r.kt)("inlineCode",{parentName:"li"},"setTimeout(runSimulationTick, simulationTickMs)"),"."),(0,r.kt)("li",{parentName:"ol"},"If ",(0,r.kt)("inlineCode",{parentName:"li"},"simulationTickMs")," is 0, we primarily use ",(0,r.kt)("inlineCode",{parentName:"li"},"Promise.resolve(1).then(runSimulationTick)"),", but intersperse ",(0,r.kt)("inlineCode",{parentName:"li"},"setTimeout(runSimulationTick, 0)")," every 1 in X ticks. X is a number I fine-tuned for maximum speed that wouldn't crash the browser.")),(0,r.kt)("p",null,"But what makes these two methods so different?"),(0,r.kt)("p",null,"The distinction lies in the JavaScript event loop. ",(0,r.kt)("inlineCode",{parentName:"p"},"setTimeout")," schedules a macrotask, while ",(0,r.kt)("inlineCode",{parentName:"p"},"Promise.resolve")," schedules a microtask. The key difference is that the event loop executes macrotasks after all microtasks have completed. Furthermore, the browser prioritizes microtasks over rendering the page. This means that excessive use of ",(0,r.kt)("inlineCode",{parentName:"p"},"Promise.resolve")," in a recursive function can monopolize the browser's resources, preventing it from rendering the page and potentially leading to a crash."),(0,r.kt)("p",null,"However, by alternating ",(0,r.kt)("inlineCode",{parentName:"p"},"Promise.resolve")," with ",(0,r.kt)("inlineCode",{parentName:"p"},"setTimeout"),", we ensure the browser has regular opportunities to render the page, preventing crashes and maintaining a responsive user interface."),(0,r.kt)("h2",{id:"conclusion"},"Conclusion"),(0,r.kt)("p",null,"In our journey through the 100 Prisoners Problem, we've grappled with probability, tested our strategic thinking, and even delved into some simulation implementation details. The optimal strategy, with its inherent cycle-based approach, offers an interesting exploration into the heart of problem-solving. It's a testament to the power of logic, even in seemingly impossible situations. Conversely, the random strategy serves as a reminder that sometimes, chance can play a surprising role in determining outcomes."),(0,r.kt)("p",null,"Remember, the power of logic, strategy, and even a bit of luck can together open the door to solutions in the most challenging scenarios."),(0,r.kt)("p",null,"Want to dive deeper? Feel free to explore the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/ericdudley/100prisoners"},"source code")," of the simulation. The simulation itself is hosted on GitHub Pages ",(0,r.kt)("a",{parentName:"p",href:"https://ericdudley.github.io/100prisoners/"},"here"),"."))}m.isMDXComponent=!0}}]);